name: Build and upload assets
on:
  release:
    types: [ published ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            TARGET: linux-gnu/amd64
          - os: ubuntu-latest
            TARGET: linux-gnu/aarch64
          - os: ubuntu-latest
            TARGET: linux-gnu/riscv64
          - os: ubuntu-latest
            TARGET: linux-gnu/powerpc64
          - os: ubuntu-latest
            TARGET: linux-gnu/powerpc64le
          - os: ubuntu-latest
            TARGET: linux-musl/amd64
          - os: ubuntu-latest
            TARGET: linux-musl/aarch64
          - os: windows-latest
            TARGET: windows-gnullvm/amd64
          - os: windows-latest
            TARGET: windows-msvc/amd64
          - os: macos-latest
            TARGET: macos/amd64
          - os: macos-latest
            TARGET: macos/aarch64
    name: Building, ${{ matrix.TARGET }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Fix CRLF on Windows
        if: runner.os == 'Windows'
        run: git config --global core.autocrlf false

      - name: Build on Linux for linux-gnu/amd64
        if: matrix.TARGET == 'linux-gnu/amd64'
        env:
          TARGET_CC: x86_64-linux-gnu-gcc
          TARGET_CXX: x86_64-linux-gnu-g++
          RUSTFLAGS: -C linker=x86_64-linux-gnu-gcc
        run: |
          scripts/prereqs.sh && scripts/build.sh
          mv ./build/Tnn-miner tnn-miner-linux-amd64

          archive="tnn-miner-${{ github.event.release.tag_name }}-linux-gnu-amd64.zip"
          zip -r "${archive}" tnn-miner-linux-amd64

      - name: Build on Linux for linux-gnu/aarch64
        if: matrix.TARGET == 'linux-gnu/aarch64'
        env:
          TARGET_CC: aarch64-linux-gnu-gcc
          TARGET_CXX: aarch64-linux-gnu-g++
          RUSTFLAGS: -C linker=aarch64-linux-gnu-gcc
        run: |
          scripts/prereqs.sh && scripts/build.sh
          mv ./build/Tnn-miner tnn-miner-linux-aarch64

          archive="tnn-miner-${{ github.event.release.tag_name }}-linux-gnu-aarch64.zip"
          zip -r "${archive}" tnn-miner-linux-aarch64


      # - name: Build on Linux for linux-gnu/riscv64
      #   if: matrix.TARGET == 'linux-gnu/riscv64'
      #   env:
      #     TARGET_CC: riscv64-linux-gnu-gcc
      #     TARGET_CXX: riscv64-linux-gnu-g++
      #     RUSTFLAGS: -C linker=riscv64-linux-gnu-gcc -latomic
      #   run: |
      #     sudo apt-get install -y gcc-riscv64-linux-gnu g++-riscv64-linux-gnu


    #   - name: Build on Linux for linux-gnu/powerpc64
    #     if: matrix.TARGET == 'linux-gnu/powerpc64'
    #     env:
    #       TARGET_CC: powerpc64-linux-gnu-gcc
    #       TARGET_CXX: powerpc64-linux-gnu-g++
    #       RUSTFLAGS: -C linker=powerpc64-linux-gnu-gcc
    #     run: |
    #       sudo apt-get install -y gcc-powerpc64-linux-gnu g++-powerpc64-linux-gnu

    #   - name: Build on Linux for linux-gnu/powerpc64le
    #     if: matrix.TARGET == 'linux-gnu/powerpc64le'
    #     env:
    #       TARGET_CC: powerpc64le-linux-gnu-gcc
    #       TARGET_CXX: powerpc64le-linux-gnu-g++
    #       RUSTFLAGS: -C linker=powerpc64le-linux-gnu-gcc
    #     run: |
    #       sudo apt-get install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu

    #   - name: Build on Linux for linux-musl/amd64
    #     if: matrix.TARGET == 'linux-musl/amd64'

    #     # We're using musl to make the binaries statically linked and portable.
    #     env:
    #       RUSTFLAGS: -C target-feature=-crt-static
    #     run: |
    #       rustup target add x86_64-unknown-linux-musl

    #   - name: Build on Linux for linux-musl/aarch64
    #     if: matrix.TARGET == 'linux-musl/aarch64'

    #     # We're using musl to make the binaries statically linked and portable.
    #     env:
    #       RUSTFLAGS: -C target-feature=-crt-static
    #     run: |
    #       rustup target add aarch64-unknown-linux-musl

    #   - name: Build on Windows for windows-gnullvm/amd64
    #     if: matrix.TARGET == 'windows-gnullvm/amd64'

    #     # We're using clang to link only the ucrt library statically.
    #     env:
    #       RUSTFLAGS: -L/clang64/lib -lstatic=c++
    #     shell: msys2 {0}
    #     run: |
    #       export PATH="${PATH}:/c/Users/runneradmin/.cargo/bin" # manually override path to select proper msys2 build tools.


    #   - name: Build on Windows for windows-msvc/amd64
    #     if: matrix.TARGET == 'windows-msvc/amd64'
    #     shell: msys2 {0}
    #     run: |
    #       export PATH="${PATH}:/c/Users/runneradmin/.cargo/bin" # manually override path to select proper msys2 build tools.


    #   - name: Build on macOS for macos/amd64
    #     if: matrix.TARGET == 'macos/amd64'
    #     run: |
    #       rustup target add x86_64-apple-darwin


    #   - name: Build on macOS for macos/aarch64
    #     if: matrix.TARGET == 'macos/aarch64'
    #     run: |
    #       rustup target add aarch64-apple-darwin


    #   - name: Upload release asset
    #     uses: softprops/action-gh-release@v2
    #     with:
    #       files: |
    #         bin/*.zip

    # runs-on: ubuntu-latest
    # name: Building WASM32 SDK
    # steps:
    #   - name: Checkout sources
    #     uses: actions/checkout@v4

    #   - name: Install Protoc
    #     uses: taiki-e/install-action@v2
    #     with:
    #       tool: protoc

    #   - name: Install stable toolchain
    #     uses: dtolnay/rust-toolchain@stable

    #   - name: Install llvm
    #     id: install_llvm
    #     continue-on-error: true
    #     run: |
    #       wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
    #       sudo apt-get install -y clang-15 lldb-15 lld-15 clangd-15 clang-tidy-15 clang-format-15 clang-tools-15 llvm-15-dev lld-15 lldb-15 llvm-15-tools libomp-15-dev libc++-15-dev libc++abi-15-dev libclang-common-15-dev libclang-15-dev libclang-cpp15-dev libunwind-15-dev
    #       # Make Clang 15 default
    #       sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-15/bin/clang++ 100
    #       sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-15/bin/clang 100
    #       sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/lib/llvm-15/bin/clang-format 100
    #       sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/lib/llvm-15/bin/clang-tidy 100
    #       sudo update-alternatives --install /usr/bin/run-clang-tidy run-clang-tidy /usr/lib/llvm-15/bin/run-clang-tidy 100
    #       # Alias cc to clang
    #       sudo update-alternatives --install /usr/bin/cc cc /usr/lib/llvm-15/bin/clang 0
    #       sudo update-alternatives --install /usr/bin/c++ c++ /usr/lib/llvm-15/bin/clang++ 0

    #   - name: Install gcc-multilib

    #     # gcc-multilib allows clang to find gnu libraries properly.
    #     run: sudo apt install -y gcc-multilib

    #   - name: Install stable toolchain
    #     if: steps.install_llvm.outcome == 'success' && steps.install_llvm.conclusion == 'success'
    #     uses: dtolnay/rust-toolchain@stable

    #   - name: Install wasm-pack
    #     run: cargo install wasm-pack

    #   - name: Add wasm32 target
    #     run: rustup target add wasm32-unknown-unknown

    #   - name: Install NodeJS
    #     uses: actions/setup-node@v4
    #     with:
    #       node-version: '20'

    #   - name: Install NodeJS dependencies
    #     run: npm install --global typedoc typescript

    #   - name: Cache
    #     uses: actions/cache@v4
    #     with:
    #       path: |
    #         ~/.cargo/bin/
    #         ~/.cargo/registry/index/
    #         ~/.cargo/registry/cache/
    #         ~/.cargo/git/db/
    #         target/
    #       key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    #   - name: Build WASM32 SDK
    #     env:
    #       TARGET_CC: clang
    #       TARGET_CFLAGS: -I/usr/include
    #     run: |
    #       mkdir sdk || true
    #       cd wasm
    #       bash build-release
    #       mv release/spectre-wasm32-sdk.zip ../sdk/spectre-wasm32-sdk-${{ github.event.release.tag_name }}.zip

    #   - name: Upload WASM32 SDK
    #     uses: softprops/action-gh-release@v2
    #     with:
    #       files: |
            # sdk/*.zip