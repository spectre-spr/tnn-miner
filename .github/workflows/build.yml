name: Build Tnn-miner on Ubuntu 22.04

on:
  push:
    branches:
    - '*'
    tags:
      - "v*.*.*"

env:
  UBUNTU_RTIFACT_NAME: tnn-miner-linux-x86_64.tar.gz
  MACOS_RTIFACT_NAME: tnn-miner-m1-arm64.tar.gz
  WINDOWS_RTIFACT_NAME: build/Tnn-miner-2024.08.18.13-dev.exe

jobs:
  # ubuntu:
  #   runs-on: ubuntu-22.04
  #   steps:
  #   - uses: actions/checkout@v4
    
  #   - name: 'Update system'
  #     run: |
  #       # sudo apt-get update
  #       # sudo apt-get install -y sudo
  #       scripts/prereqs.sh && scripts/build.sh
  #       mv ./build/Tnn-miner tnn-miner-linux-amd64
  #       tar zcvf ${{ env.UBUNTU_RTIFACT_NAME }} tnn-miner-linux-amd64         

  #   - name: '正在导出 Ubuntu 构建的包'
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name: ${{ env.UBUNTU_RTIFACT_NAME }}
  #       path: 
  #         ${{ env.UBUNTU_RTIFACT_NAME }}
  #       retention-days: 5

    # - name: 'Release (linux-amd64)'
    #   uses: softprops/action-gh-release@v2
    #   if: startsWith(github.ref, 'refs/tags/')
    #   with:
    #     tag_name: ${{ github.ref }}
    #     files: |
    #       ${{ env.UBUNTU_RTIFACT_NAME }}
    #     prerelease: false

  # macOS:
  #   runs-on: macos-latest
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Pack
  #     run: |
  #       # brew install clang
  #       brew install fmt
  #       brew install cmake
  #       mkdir ./build
  #       cd ./build
  #       ln -s /opt/homebrew/Cellar/fmt/10.2.1_1/include/fmt /Users/runner/work/tnn-miner/tnn-miner/src/miner/fmt
  #       cmake -DTNN_VERSION=$PACKAGE_VERSION ..
  #       make -j$(nproc)
  #       cd ../
  #       mv ./build/Tnn-miner ./tnn-miner-m1-arm64
  #       tar -zcf ${{ env.MACOS_RTIFACT_NAME }} ./tnn-miner-m1-arm64  

  #   - name: '正在导出 MacOS 构建的包'
  #     uses: actions/upload-artifact@v4
  #     with:
  #       name:  ${{ env.MACOS_RTIFACT_NAME }}
  #       path: 
  #          ${{ env.MACOS_RTIFACT_NAME }}
  #       retention-days: 5

  Windows:
    # runs-on: windows-latest
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v2

    - name: Cache C++ dependencies
      uses: actions/cache@v2
      with:
        path: |
          build
          .cache 
          include
        key: cplusplus-dependencies-${{ hashFiles('CMakeLists.txt') }}
        
    - name: Pack
      run: |
        .\scripts\prereqs.bat ci
        .\scripts\build.ps1 ci      

    - name: '正在导出 Windows 构建的包'
      uses: actions/upload-artifact@v4
      with:
        name:  ${{ env.WINDOWS_RTIFACT_NAME }}
        path: 
           ${{ env.WINDOWS_RTIFACT_NAME }}
        retention-days: 5
          


# jobs:
#   ubuntu-22:
#     runs-on: ubuntu-22.04
#     steps:
#     - uses: actions/checkout@v4
#     - name: 'Update system'
#       run: |
#         sudo update-alternatives --display clang
#         sudo update-alternatives --display clang++
#         sudo update-alternatives --list clang
#         sudo update-alternatives --list clang++
#         sudo update-alternatives --get-selections
#         sudo apt update
#         #sudo apt upgrade -y
#     - name: 'Setup pre-reqs'
#       run: |
#         sudo apt install git wget build-essential cmake clang libssl-dev libudns-dev libfmt-dev libc++-dev
#         #sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100 --slave /usr/bin/gcc gcc /usr/bin/gcc-10
#     - name: 'Install clang 18'
#       run: |
#         version=18
#         echo "deb http://apt.llvm.org/jammy/ llvm-toolchain-jammy-18 main" | sudo tee /etc/apt/sources.list.d/clang.list
#         wget -qO- https://apt.llvm.org/llvm-snapshot.gpg.key | sudo tee /etc/apt/trusted.gpg.d/apt.llvm.org.asc
#         sudo apt update
#         sudo apt install -y "clang-$version" "lldb-$version" "lld-$version" "clang-format-$version" "clang-tidy-$version"
#     - name: 'Update default clang'
#       run: |
#         version=18
#         # https://github.com/actions/runner-images/blob/main/images/ubuntu/scripts/build/install-clang.sh#L17
#         sudo update-alternatives --display clang++
#         sudo update-alternatives --display clang        
#         echo "Make Clang ${version} default"
#         sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/bin/clang++-${version} 100
#         sudo update-alternatives --install /usr/bin/clang clang /usr/bin/clang-${version} 100
#         sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-${version} 100
#         sudo update-alternatives --install /usr/bin/clang-tidy clang-tidy /usr/bin/clang-tidy-${version} 100
#         sudo update-alternatives --install /usr/bin/run-clang-tidy run-clang-tidy /usr/bin/run-clang-tidy-${version} 100
#         sudo update-alternatives --set clang++ /usr/bin/clang++-${version}
#         sudo update-alternatives --set clang /usr/bin/clang-${version}
#         sudo update-alternatives --display clang++
#         sudo update-alternatives --display clang
#         clang --version
#         clang++ --version
#     - name: 'Compile Tnn-miner'
#       run: |
#         sudo apt-get install -y libsodium-dev libsodium23
#         mkdir build
#         cd build
#         cmake ..
#         make -j$(nproc)
#         tar -cvf ../tnn-miner.tar Tnn-miner*
#     - name: 'Archive tnn-miner.tar.gz'
#       uses: actions/upload-artifact@v4
#       with:
#         name: tnn-miner.tar
#         path: ./tnn-miner.tar
#         retention-days: 5
#     - name: 'Dero Test'
#       run: |
#         ./build/Tnn-miner --dero-test
#     - name: 'Xelis Test'
#       run: |
#         ./build/Tnn-miner --xelis-test
#     - name: 'Release'
#       uses: softprops/action-gh-release@v2
#       if: startsWith(github.ref, 'refs/tags/')
#       with:
#         make_latest: "true"
#         files: |
#           tnn-miner.tar.gz
